{"ast":null,"code":"var _jsxFileName = \"/Users/shubham/Documents/GitHub/reactnd-project-would-you-rather/src/components/UserCard.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Segment, Header, Grid, Image } from 'semantic-ui-react';\nimport PollQuestion from './PollQuestion';\nimport PollResult from './PollResult';\nimport PollTeaser from './PollTeaser';\nimport { colors } from '../utils/helper';\nconst pollTypes = {\n  POLL_TEASER: 'POLL_TEASER',\n  POLL_QUESTION: 'POLL_QUESTION',\n  POLL_RESULT: 'POLL_RESULT'\n};\n\nconst PollContent = props => {\n  const {\n    pollType,\n    question,\n    unanswered\n  } = props;\n\n  switch (pollType) {\n    case pollTypes.POLL_TEASER:\n      return /*#__PURE__*/React.createElement(PollTeaser, {\n        question: question,\n        unanswered: unanswered,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 20\n        }\n      });\n\n    case pollTypes.POLL_QUESTION:\n      return /*#__PURE__*/React.createElement(PollQuestion, {\n        question: question,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 20\n        }\n      });\n\n    case pollTypes.POLL_RESULT:\n      return /*#__PURE__*/React.createElement(PollResult, {\n        question: question,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 20\n        }\n      });\n\n    default:\n      return;\n  }\n};\n\nexport class UserCard extends Component {\n  render() {\n    const {\n      author,\n      question,\n      pollType,\n      badPath,\n      unanswered = null\n    } = this.props;\n\n    if (badPath === true) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/questions/bad_id\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 20\n        }\n      });\n    }\n\n    const tabColor = unanswered === true ? colors.green : colors.blue;\n    const borderTop = unanswered === null ? `1px solid ${colors.grey}` : `2px solid ${tabColor.hex}`;\n    return /*#__PURE__*/React.createElement(Segment.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h5\",\n      textAlign: \"left\",\n      block: true,\n      attached: \"top\",\n      style: {\n        borderTop: borderTop\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, author.name, \" asks:\"), /*#__PURE__*/React.createElement(Grid, {\n      divided: true,\n      padded: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: author.avatarURL,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 11,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PollContent, {\n      pollType: pollType,\n      question: question,\n      unanswered: unanswered,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\nUserCard.propTypes = {\n  question: PropTypes.object,\n  author: PropTypes.object,\n  pollType: PropTypes.string,\n  unanswered: PropTypes.bool,\n  question_id: PropTypes.string\n};\n\nfunction mapStateToProps({\n  users,\n  questions,\n  authUser\n}, {\n  match,\n  question_id\n}) {\n  let question,\n      author,\n      pollType,\n      badPath = false;\n\n  if (question_id !== undefined) {\n    question = questions[question_id];\n    author = users[question.author];\n    pollType = pollTypes.POLL_TEASER;\n  } else {\n    const {\n      question_id\n    } = match.params;\n    question = questions[question_id];\n    const user = users[authUser];\n\n    if (question === undefined) {\n      badPath = true;\n    } else {\n      author = users[question.author];\n      pollType = pollTypes.POLL_QUESTION;\n\n      if (Object.keys(user.answers).includes(question.id)) {\n        pollType = pollTypes.POLL_RESULT;\n      }\n    }\n  }\n\n  return {\n    badPath,\n    question,\n    author,\n    pollType\n  };\n}\n\nexport default connect(mapStateToProps)(UserCard);","map":{"version":3,"sources":["/Users/shubham/Documents/GitHub/reactnd-project-would-you-rather/src/components/UserCard.js"],"names":["React","Component","PropTypes","connect","Redirect","Segment","Header","Grid","Image","PollQuestion","PollResult","PollTeaser","colors","pollTypes","POLL_TEASER","POLL_QUESTION","POLL_RESULT","PollContent","props","pollType","question","unanswered","UserCard","render","author","badPath","tabColor","green","blue","borderTop","grey","hex","name","avatarURL","propTypes","object","string","bool","question_id","mapStateToProps","users","questions","authUser","match","undefined","params","user","Object","keys","answers","includes","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Segment, Header, Grid, Image } from 'semantic-ui-react';\nimport PollQuestion from './PollQuestion';\nimport PollResult from './PollResult';\nimport PollTeaser from './PollTeaser';\nimport { colors } from '../utils/helper';\n\nconst pollTypes = {\n    POLL_TEASER: 'POLL_TEASER',\n    POLL_QUESTION: 'POLL_QUESTION',\n    POLL_RESULT: 'POLL_RESULT'\n};\n\nconst PollContent = props => {\n    const { pollType, question, unanswered } = props;\n\n    switch (pollType) {\n        case pollTypes.POLL_TEASER:\n            return <PollTeaser question={question} unanswered={unanswered} />;\n        case pollTypes.POLL_QUESTION:\n            return <PollQuestion question={question} />;\n        case pollTypes.POLL_RESULT:\n            return <PollResult question={question} />;\n        default:\n            return;\n    }\n};\n\nexport class UserCard extends Component {\n    static propTypes = {\n        question: PropTypes.object,\n        author: PropTypes.object,\n        pollType: PropTypes.string,\n        unanswered: PropTypes.bool,\n        question_id: PropTypes.string\n    };\n    render() {\n        const {\n            author,\n            question,\n            pollType,\n            badPath,\n            unanswered = null\n        } = this.props;\n\n        if (badPath === true) {\n            return <Redirect to=\"/questions/bad_id\" />;\n        }\n\n        const tabColor = unanswered === true ? colors.green : colors.blue;\n        const borderTop =\n            unanswered === null\n                ? `1px solid ${colors.grey}`\n                : `2px solid ${tabColor.hex}`;\n\n        return (\n            <Segment.Group>\n                <Header\n                    as=\"h5\"\n                    textAlign=\"left\"\n                    block\n                    attached=\"top\"\n                    style={{ borderTop: borderTop }}\n                >\n                    {author.name} asks:\n                </Header>\n\n                <Grid divided padded>\n                    <Grid.Row>\n                        <Grid.Column width={5}>\n                            <Image src={author.avatarURL} />\n                        </Grid.Column>\n                        <Grid.Column width={11}>\n                            <PollContent\n                                pollType={pollType}\n                                question={question}\n                                unanswered={unanswered}\n                            />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment.Group>\n        );\n    }\n}\n\nfunction mapStateToProps(\n    { users, questions, authUser },\n    { match, question_id }\n) {\n    let question,\n        author,\n        pollType,\n        badPath = false;\n    if (question_id !== undefined) {\n        question = questions[question_id];\n        author = users[question.author];\n        pollType = pollTypes.POLL_TEASER;\n    } else {\n        const { question_id } = match.params;\n        question = questions[question_id];\n        const user = users[authUser];\n\n        if (question === undefined) {\n            badPath = true;\n        } else {\n            author = users[question.author];\n            pollType = pollTypes.POLL_QUESTION;\n            if (Object.keys(user.answers).includes(question.id)) {\n                pollType = pollTypes.POLL_RESULT;\n            }\n        }\n    }\n\n    return {\n        badPath,\n        question,\n        author,\n        pollType\n    };\n}\n\nexport default connect(mapStateToProps)(UserCard);"]},"metadata":{},"sourceType":"module"}