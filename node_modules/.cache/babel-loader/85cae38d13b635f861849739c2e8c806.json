{"ast":null,"code":"var _jsxFileName = \"/Users/shubham/Documents/GitHub/reactnd-project-would-you-rather/src/components/Leaderboard.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropType from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Segment, Grid, Header, Image, Label, Divider } from 'semantic-ui-react';\nconst trophyColor = ['yellow', 'grey', 'orange'];\nexport class Leaderboard extends Component {\n  render() {\n    const {\n      leaderboardData\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }\n    }, leaderboardData.map((user, idx) => /*#__PURE__*/React.createElement(Segment.Group, {\n      key: user.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      corner: \"left\",\n      icon: \"trophy\",\n      color: trophyColor[idx],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      divided: true,\n      padded: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      verticalAlign: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: user.avatarURL,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h3\",\n      textAlign: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 37\n      }\n    }, user.name), /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 41\n      }\n    }, \"Answered questions\"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 41\n      }\n    }, user.answerCount)), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 41\n      }\n    }, \"Created questions\"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 41\n      }\n    }, user.questionCount))), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Segment.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h5\",\n      block: true,\n      attached: \"top\",\n      content: \"Score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      circular: true,\n      color: \"green\",\n      size: \"big\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 45\n      }\n    }, user.questionCount + user.answerCount)))))))));\n  }\n\n}\nLeaderboard.propType = {\n  leaderboardData: PropType.array.isRequired\n};\n\nfunction mapStateToProps({\n  users\n}) {\n  const leaderboardData = Object.values(users).map(user => ({\n    id: user.id,\n    name: user.name,\n    avatarURL: user.avatarURL,\n    answerCount: Object.values(user.answers).length,\n    questionCount: user.questions.length,\n    total: Object.values(user.answers).length + user.questions.length\n  })).sort((a, b) => a.total - b.total).reverse().slice(0, 3);\n  return {\n    leaderboardData\n  };\n}\n\nexport default connect(mapStateToProps)(Leaderboard);","map":{"version":3,"sources":["/Users/shubham/Documents/GitHub/reactnd-project-would-you-rather/src/components/Leaderboard.js"],"names":["React","Component","Fragment","PropType","connect","Segment","Grid","Header","Image","Label","Divider","trophyColor","Leaderboard","render","leaderboardData","props","map","user","idx","id","avatarURL","name","answerCount","questionCount","propType","array","isRequired","mapStateToProps","users","Object","values","answers","length","questions","total","sort","a","b","reverse","slice"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropType from 'prop-types';\nimport { connect } from 'react-redux';\nimport {Segment, Grid, Header, Image, Label, Divider} from 'semantic-ui-react';\n\nconst trophyColor = ['yellow', 'grey', 'orange'];\n\nexport class Leaderboard extends Component {\n    static propType = {\n        leaderboardData: PropType.array.isRequired\n    };\n    render() {\n        const { leaderboardData } = this.props;\n\n        return (\n            <Fragment>\n                {leaderboardData.map((user, idx) => (\n                    <Segment.Group key={user.id}>\n                        <Label corner=\"left\" icon=\"trophy\" color={trophyColor[idx]} />\n                        <Grid divided padded>\n                            <Grid.Row>\n                                <Grid.Column width={4} verticalAlign=\"middle\">\n                                    <Image src={user.avatarURL} />\n                                </Grid.Column>\n                                <Grid.Column width={8}>\n                                    <Header as=\"h3\" textAlign=\"left\">\n                                        {user.name}\n                                    </Header>\n                                    <Grid>\n                                        <Grid.Column width={12}>Answered questions</Grid.Column>\n                                        <Grid.Column width={4}>{user.answerCount}</Grid.Column>\n                                    </Grid>\n                                    <Divider />\n                                    <Grid>\n                                        <Grid.Column width={12}>Created questions</Grid.Column>\n                                        <Grid.Column width={4}>{user.questionCount}</Grid.Column>\n                                    </Grid>\n                                </Grid.Column>\n                                <Grid.Column width={4} textAlign=\"center\">\n                                    <Segment.Group>\n                                        <Header as=\"h5\" block attached=\"top\" content=\"Score\" />\n                                        <Segment>\n                                            <Label circular color=\"green\" size=\"big\">\n                                                {user.questionCount + user.answerCount}\n                                            </Label>\n                                        </Segment>\n                                    </Segment.Group>\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Segment.Group>\n                ))}\n            </Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps({ users }) {\n    const leaderboardData = Object.values(users)\n        .map(user => ({\n            id: user.id,\n            name: user.name,\n            avatarURL: user.avatarURL,\n            answerCount: Object.values(user.answers).length,\n            questionCount: user.questions.length,\n            total: Object.values(user.answers).length + user.questions.length\n        }))\n        .sort((a, b) => a.total - b.total)\n        .reverse()\n        .slice(0, 3);\n    return {\n        leaderboardData\n    };\n}\n\nexport default connect(mapStateToProps)(Leaderboard);"]},"metadata":{},"sourceType":"module"}