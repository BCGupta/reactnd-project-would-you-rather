{"ast":null,"code":"var _jsxFileName = \"/Users/shubham/Documents/GitHub/reactnd-project-would-you-rather/src/components/Home.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Tab } from 'semantic-ui-react';\nimport UserCard from './UserCard';\nimport PollTeaser from './PollTeaser';\nconst color = {\n  green: {\n    name: 'green',\n    hex: '#21ba45'\n  },\n  blue: {\n    name: 'blue',\n    hex: '#2185d0'\n  }\n};\nexport class Home extends Component {\n  render() {\n    const {\n      userQuestionData\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Tab, {\n      panes: panes({\n        userQuestionData\n      }),\n      className: \"tab\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\nHome.propTypes = {\n  userQuestionData: PropTypes.object.isRequired\n};\n\nconst panes = props => {\n  const {\n    userQuestionData\n  } = props;\n  return [{\n    menuItem: 'Unanswered',\n    render: () => /*#__PURE__*/React.createElement(Tab.Pane, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }, userQuestionData.answered.map(question => /*#__PURE__*/React.createElement(UserCard, {\n      key: question.id,\n      userId: question.author,\n      color: color.green.hex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PollTeaser, {\n      question: question,\n      unanswered: true,\n      color: color.green.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 29\n      }\n    }))))\n  }, {\n    menuItem: 'Answered',\n    render: () => /*#__PURE__*/React.createElement(Tab.Pane, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, userQuestionData.unanswered.map(question => /*#__PURE__*/React.createElement(UserCard, {\n      key: question.id,\n      userId: question.author,\n      color: color.blue.hex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PollTeaser, {\n      question: question,\n      unanswered: false,\n      color: color.blue.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 29\n      }\n    }))))\n  }];\n};\n\nfunction mapStateToProps({\n  authUser,\n  users,\n  questions\n}) {\n  const answeredIds = Object.keys(users[authUser].answers);\n  const answered = Object.values(questions).filter(question => answeredIds.includes(question.id)).sort((a, b) => b.timestamp - a.timestamp);\n  const unanswered = Object.values(questions).filter(question => !answeredIds.includes(question.id)).sort((a, b) => b.timestamp - a.timestamp);\n  return {\n    userQuestionData: {\n      answered,\n      unanswered\n    }\n  };\n}\n\nexport default connect(mapStateToProps)(Home);","map":{"version":3,"sources":["/Users/shubham/Documents/GitHub/reactnd-project-would-you-rather/src/components/Home.js"],"names":["React","Component","PropTypes","connect","Tab","UserCard","PollTeaser","color","green","name","hex","blue","Home","render","userQuestionData","props","panes","propTypes","object","isRequired","menuItem","answered","map","question","id","author","unanswered","mapStateToProps","authUser","users","questions","answeredIds","Object","keys","answers","values","filter","includes","sort","a","b","timestamp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Tab } from 'semantic-ui-react';\nimport UserCard from './UserCard';\nimport PollTeaser from './PollTeaser';\n\nconst color = {\n    green: {\n        name: 'green',\n        hex: '#21ba45'\n    },\n    blue: {\n        name: 'blue',\n        hex: '#2185d0'\n    }\n};\n\nexport class Home extends Component {\n    static propTypes = {\n        userQuestionData: PropTypes.object.isRequired\n    };\n    render() {\n        const { userQuestionData } = this.props;\n\n        return <Tab panes={panes({ userQuestionData })} className=\"tab\" />;\n    }\n}\n\nconst panes = props => {\n    const { userQuestionData } = props;\n    return [\n        {\n            menuItem: 'Unanswered',\n            render: () => (\n                <Tab.Pane>\n                    {userQuestionData.answered.map(question => (\n                        <UserCard\n                            key={question.id}\n                            userId={question.author}\n                            color={color.green.hex}\n                        >\n                            <PollTeaser\n                                question={question}\n                                unanswered={true}\n                                color={color.green.name}\n                            />\n                        </UserCard>\n                    ))}\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: 'Answered',\n            render: () => (\n                <Tab.Pane>\n                    {userQuestionData.unanswered.map(question => (\n                        <UserCard\n                            key={question.id}\n                            userId={question.author}\n                            color={color.blue.hex}\n                        >\n                            <PollTeaser\n                                question={question}\n                                unanswered={false}\n                                color={color.blue.name}\n                            />\n                        </UserCard>\n                    ))}\n                </Tab.Pane>\n            )\n        }\n    ];\n};\n\nfunction mapStateToProps({ authUser, users, questions }) {\n    const answeredIds = Object.keys(users[authUser].answers);\n    const answered = Object.values(questions)\n        .filter(question => answeredIds.includes(question.id))\n        .sort((a, b) => b.timestamp - a.timestamp);\n    const unanswered = Object.values(questions)\n        .filter(question => !answeredIds.includes(question.id))\n        .sort((a, b) => b.timestamp - a.timestamp);\n\n    return {\n        userQuestionData: {\n            answered,\n            unanswered\n        }\n    };\n}\n\nexport default connect(mapStateToProps)(Home);"]},"metadata":{},"sourceType":"module"}