{"ast":null,"code":"var _jsxFileName = \"/Users/shubham/Documents/GitHub/reactnd-project-would-you-rather/src/components/PollResults.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Header, Segment, Progress, Label, Button, Icon } from 'semantic-ui-react';\nimport { styles } from '../utils/helper';\n\nconst YourVoteLabel = () => /*#__PURE__*/React.createElement(Label, {\n  color: \"orange\",\n  ribbon: \"right\",\n  className: \"vote\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Icon, {\n  name: \"check circle outline\",\n  size: \"big\",\n  className: \"compact\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    float: 'right'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }\n}, \"Your\", /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 13\n  }\n}), \"Vote\"));\n\nexport class PollResult extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClick = () => {\n      this.props.history.push('/');\n    };\n  }\n\n  render() {\n    const {\n      question,\n      user\n    } = this.props;\n    const optionOneVotes = question.optionOne.votes.length;\n    const optionTwoVotes = question.optionTwo.votes.length;\n    const votesTotal = optionOneVotes + optionTwoVotes;\n    const userVote = user.answers[question.id];\n    let option1 = styles.secondary,\n        option2 = styles.secondary;\n\n    if (optionOneVotes > optionTwoVotes) {\n      option1 = styles.primary;\n    } else if (optionTwoVotes > optionOneVotes) {\n      option2 = styles.primary;\n    }\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, \"Results:\", /*#__PURE__*/React.createElement(Header.Subheader, {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }\n    }, \"Would you rather\")), /*#__PURE__*/React.createElement(Segment, {\n      color: option1.color,\n      style: {\n        backgroundColor: `${option1.bgColor}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, userVote === 'optionOne' && /*#__PURE__*/React.createElement(YourVoteLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 50\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, question.optionOne.text), /*#__PURE__*/React.createElement(Progress, {\n      percent: (optionOneVotes / votesTotal * 100).toFixed(2),\n      progress: true,\n      color: option1.color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }, optionOneVotes, \" out of \", votesTotal, \" votes\")), /*#__PURE__*/React.createElement(Segment, {\n      color: option2.color,\n      style: {\n        backgroundColor: `${option2.bgColor}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, userVote === 'optionTwo' && /*#__PURE__*/React.createElement(YourVoteLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 50\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }, question.optionTwo.text), /*#__PURE__*/React.createElement(Progress, {\n      percent: (optionTwoVotes / votesTotal * 100).toFixed(2),\n      progress: true,\n      color: option2.color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, optionTwoVotes, \" out of \", votesTotal, \" votes\")), /*#__PURE__*/React.createElement(Button, {\n      size: \"tiny\",\n      floated: \"right\",\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, \"Back\"));\n  }\n\n}\nPollResult.propTypes = {\n  history: PropTypes.object.isRequired,\n  question: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps({\n  users,\n  authUser\n}) {\n  const user = users[authUser];\n  return {\n    user\n  };\n}\n\nexport default withRouter(connect(mapStateToProps)(PollResult));","map":{"version":3,"sources":["/Users/shubham/Documents/GitHub/reactnd-project-would-you-rather/src/components/PollResults.js"],"names":["React","Component","Fragment","PropTypes","withRouter","connect","Header","Segment","Progress","Label","Button","Icon","styles","YourVoteLabel","float","PollResult","handleClick","props","history","push","render","question","user","optionOneVotes","optionOne","votes","length","optionTwoVotes","optionTwo","votesTotal","userVote","answers","id","option1","secondary","option2","primary","fontWeight","color","backgroundColor","bgColor","text","toFixed","propTypes","object","isRequired","mapStateToProps","users","authUser"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {Header, Segment, Progress, Label, Button, Icon} from 'semantic-ui-react';\nimport { styles } from '../utils/helper';\n\nconst YourVoteLabel = () => (\n    <Label color=\"orange\" ribbon=\"right\" className=\"vote\">\n        <Icon name=\"check circle outline\" size=\"big\" className=\"compact\" />\n        <div style={{ float: 'right' }}>\n            Your\n            <br />\n            Vote\n        </div>\n    </Label>\n);\n\nexport class PollResult extends Component {\n    static propTypes = {\n        history: PropTypes.object.isRequired,\n        question: PropTypes.object.isRequired,\n        user: PropTypes.object.isRequired\n    };\n    handleClick = () => {\n        this.props.history.push('/');\n    };\n\n    render() {\n        const { question, user } = this.props;\n        const optionOneVotes = question.optionOne.votes.length;\n        const optionTwoVotes = question.optionTwo.votes.length;\n        const votesTotal = optionOneVotes + optionTwoVotes;\n        const userVote = user.answers[question.id];\n\n        let option1 = styles.secondary,\n            option2 = styles.secondary;\n        if (optionOneVotes > optionTwoVotes) {\n            option1 = styles.primary;\n        } else if (optionTwoVotes > optionOneVotes) {\n            option2 = styles.primary;\n        }\n\n        return (\n            <Fragment>\n                <Header as=\"h3\">\n                    Results:\n                    <Header.Subheader style={{ fontWeight: 'bold' }}>\n                        Would you rather\n                    </Header.Subheader>\n                </Header>\n                <Segment\n                    color={option1.color}\n                    style={{ backgroundColor: `${option1.bgColor}` }}\n                >\n                    {userVote === 'optionOne' && <YourVoteLabel />}\n                    <p style={{ fontWeight: 'bold' }}>{question.optionOne.text}</p>\n                    <Progress\n                        percent={((optionOneVotes / votesTotal) * 100).toFixed(2)}\n                        progress\n                        color={option1.color}\n                    >\n                        {optionOneVotes} out of {votesTotal} votes\n                    </Progress>\n                </Segment>\n                <Segment\n                    color={option2.color}\n                    style={{ backgroundColor: `${option2.bgColor}` }}\n                >\n                    {userVote === 'optionTwo' && <YourVoteLabel />}\n\n                    <p style={{ fontWeight: 'bold' }}>{question.optionTwo.text}</p>\n                    <Progress\n                        percent={((optionTwoVotes / votesTotal) * 100).toFixed(2)}\n                        progress\n                        color={option2.color}\n                    >\n                        {optionTwoVotes} out of {votesTotal} votes\n                    </Progress>\n                </Segment>\n                {/* <Form.Field> */}\n                <Button size=\"tiny\" floated=\"right\" onClick={this.handleClick}>\n                    Back\n                </Button>\n                {/* </Form.Field> */}\n            </Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps({ users, authUser }) {\n    const user = users[authUser];\n    return {\n        user\n    };\n}\n\nexport default withRouter(connect(mapStateToProps)(PollResult));"]},"metadata":{},"sourceType":"module"}